javascript:(function(){
/*
 Bookmarklet for adding interactive functionality to PlantUML class diagrams.
 To use it, create a bookmark in your browser, and copy paste this whole script
 in the "Location" field; give it a descriptive name and save the bookmark.

 Whenever you open an SVG generated by PlantUML, visit the bookmark (through the
 Bookmark menu or the bookmark toolbar) to activate the interactive features.

 If you edit this file, make sure it can work without any newlines.  Avoid
 inline (//) comments, and do not forget your semicolons.
*/

  var highlightColor = '#f0f';
  var highlightStrokeWidth = 1.5;

  var svg = document.getElementsByTagName('svg')[0];
  svg.addEventListener('click', onClick);

  /* If we are inside a rect (class), highlight it and all its outgoing links */
  function onClick(ev) {
    var rect = pickRect(ev.target);
    if (rect != null) {
      toggleHighlight(rect);
      var links = findOutgoingLinksFor(rect.id);
      links.forEach(function(l) {
        toggleHighlight(l);
        findArrowHeadsFor(l).forEach(toggleHighlight);
      });
    }

    ev.preventDefault();
  }

  /* Unfortunately, PlantUML does not use groups for SVG elements that belong to
   * the same class.  But it looks like it outputs them in sequence.  So we can
   * lookup previous siblings until we find a rect with an id, and this will
   * give us the nearest class. */
  function pickRect(elem) {
    while (elem) {
      if (elem.id && elem.tagName.toLowerCase() == 'rect') {
        return elem;
      }
      elem = elem.previousSibling;
    }
    return null;
  }

  /* Highlight element and save the previous stroke color as an attribute */
  function toggleHighlight(elem) {
    if (elem.classList.contains('highlighted')) {
      elem.classList.remove('highlighted');
      unsetStyle(elem, elem.style.fill ? 'fill' : 'stroke');
      unsetStyle(elem, 'strokeWidth');
    } else {
      elem.classList.add('highlighted');
      setStyle(elem, elem.style.fill ? 'fill' : 'stroke', highlightColor);
      setStyle(elem, 'strokeWidth', highlightStrokeWidth);
    }
  }

  function setStyle(elem, style, value) {
    elem.setAttribute('data-prev-' + style, elem.style[style]);
    elem.style[style] = value;
  }

  function unsetStyle(elem, style) {
    elem.style[style] = elem.getAttribute('data-prev-' + style);
  }

  /* PlantUML sets id="A-B" on path that represent links from A to B */
  function findOutgoingLinksFor(id) {
    return svg.querySelectorAll('path[id^=' + id + '-]');
  }

  function findIncomingLinksFor(id) {
    return svg.querySelectorAll('path[id$=-' + id + ']');
  }

  /* If we want the arrow heads, they are all the polygons following the
   * paths */
  function findArrowHeadsFor(link) {
    var heads = [];
    link = link.nextSibling;
    while (link && link.tagName && link.tagName.toLowerCase() == 'polygon') {
      heads.push(link);
      link = link.nextSibling;
    }
    return heads;
  }

}());
